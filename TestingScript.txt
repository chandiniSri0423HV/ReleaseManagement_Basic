""pipeline {
    agent any

    tools {
        git 'GitDefault' // Replace with the Git installation name set in Global Tool Configuration
    }

    environment {
        USR = credentials('DEV_CredID').username
        PSW = credentials('DEV_CredID').password
        serviceURL = 'https://testinstance-idevjxz332qf-ia.integration.ocp.oraclecloud.com'
    }

    parameters {
        booleanParam(name: 'Activate_Integration', defaultValue: false, description: 'Check to activate the integration after importing')
        string(name: 'InstanceURL', defaultValue: 'DEV', description: 'Target instance')
        string(name: 'IARFileName', defaultValue: 'ITEM_INTEGRATION_01.00.0000.iar', description: 'IAR File Name')
        string(name: 'Import_Method', defaultValue: 'New', description: 'New or Replace')
        string(name: 'Integration_Identifier', defaultValue: 'ITEM_INTEGRATION|01.00.0000', description: 'Integration Identifier')
        string(name: 'ConnectionProperties', defaultValue: 'ConnectDetails.csv', description: 'Connection CSV File')
        string(name: 'FileNames', defaultValue: 'PersonDetails.csv', description: 'Comma-separated lookup filenames')
    }

    stages {
        stage('Import Integration') {
            steps {
                script {
                    def selectedOption = params.Import_Method.trim()
                    if (selectedOption == 'New') {
                        echo 'Adding new integration'
                        def integURL = "${env.serviceURL}/ic/api/integration/v1/integrations/archive"
                        def deployIntegCmd = "curl --location \"${integURL}\" --user ${env.USR}:${env.PSW} --form \"file=@\\\"${params.IARFileName}\\\"\""
                        bat(deployIntegCmd)
                    } else if (selectedOption == 'Replace') {
                        echo 'Replacing an integration'
                        def integName = params.Integration_Identifier
                        def deactivateIntegrationCmd = "curl --user ${env.USR}:${env.PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Deactivate.json -d 'enableAsyncActivationMode=true' \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(deactivateIntegrationCmd)
                        def updateIntegFileCmd = "curl -X PUT --user ${env.USR}:${env.PSW} --header \"Accept: application/json\" --form \"file=@\\\"${params.IARFileName}\\\"\" --form type=application/octet-stream ${env.serviceURL}/ic/api/integration/v1/integrations/archive"
                        bat(updateIntegFileCmd)
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                script {
                    def csvFile = readFile(params.ConnectionProperties).trim()
                    def records = csvFile.readLines().drop(1).collect { it.tokenize(',') }
                    records.each { record ->
                        def (url, user, pass, connName) = record

                        def conProperties = """
                            {
                                \"connectionProperties\": {
                                    \"propertyGroup\": \"CONNECTION_PROPS\",
                                    \"propertyName\": \"connectionUrl\",
                                    \"propertyType\": \"URL\",
                                    \"propertyValue\": \"${url}\"
                                },
                                \"securityPolicy\": \"BASIC_AUTH\",
                                \"securityProperties\": [
                                    {
                                        \"propertyGroup\": \"CREDENTIALS\",
                                        \"propertyName\": \"username\",
                                        \"propertyValue\": \"${user}\"
                                    },
                                    {
                                        \"propertyGroup\": \"CREDENTIALS\",
                                        \"propertyName\": \"password\",
                                        \"propertyValue\": \"${pass}\"
                                    }
                                ]
                            }
                        """
                        writeFile file: 'payload.json', text: conProperties.replace('\n', '').trim()
                        echo "Configuring connection ${connName}"
                        bat """
                            curl -X POST --user ${env.USR}:${env.PSW} \
                            --header \"X-HTTP-Method-Override:PATCH\" \
                            --header \"Content-Type:application/json\" \
                            -d @payload.json \
                            \"${env.serviceURL}/ic/api/integration/v1/connections/${connName}\"
                        """
                    }
                }
            }
        }

        stage('Import Lookup') {
            steps {
                script {
                    def files = params.FileNames.split(',')
                    def selectedOption = params.Import_Method.trim()
                    files.each { fileName ->
                        fileName = fileName.trim()
                        if (fileName) {
                            def method = selectedOption == 'New' ? 'POST' : 'PUT'
                            echo "${selectedOption == 'New' ? 'Adding' : 'Replacing'} lookup: ${fileName}"
                            bat """
                                curl -X ${method} --user ${env.USR}:${env.PSW} \
                                -F \"file=@${fileName}\" \
                                -F \"type=application/octet-stream\" \
                                ${env.serviceURL}/ic/api/integration/v1/lookups/archive
                            """
                        }
                    }
                }
            }
        }

        stage('Activate Integration') {
            steps {
                script {
                    def integName = params.Integration_Identifier
                    if (params.Activate_Integration) {
                        echo 'Activating integration'
                        def cmd = "curl --user ${env.USR}:${env.PSW} \
                            --header \"Content-Type: application/json\" \
                            --header \"X-HTTP-Method-Override: PATCH\" \
                            -d @Activate.json \
                            --location \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(cmd)
                    } else {
                        echo 'Deactivating integration'
                        def cmd = "curl --user ${env.USR}:${env.PSW} \
                            --header \"Content-Type: application/json\" \
                            --header \"X-HTTP-Method-Override: PATCH\" \
                            -d @Deactivate.json \
                            -d 'enableAsyncActivationMode=true' \
                            \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(cmd)
                    }
                }
            }
        }
    }
}
