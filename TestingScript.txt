def passwordHandler(String input) {
    StringBuilder result = new StringBuilder()
    for (int i = 0; i < input.length(); i++) {
        if (input.charAt(i) == '%') {
            result.append('%')
        }
        result.append(input.charAt(i))
    }
    return result.toString()
}

pipeline {
    agent any

    environment {
        SERVICE_URL_DEV = 'https://testinstance-idevjxz332qf-ia.integration.ocp.oraclecloud.com'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                   def instance = params.InstanceURL ? params.InstanceURL.trim() : ''
if (!instance) {
    error("InstanceURL parameter is not defined. Please set it in job configuration.")
}

                }
            }
        }

        stage('Import Integration') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                    script {
                        def method = params.Import_Method.trim()
                        def fileName = params.IARFileName.trim()
                        def integName = params.Integration_Identifier.trim()

                        if (method == 'New') {
                            echo 'Adding new integration'
                            def cmd = """curl --location "${serviceURL}/ic/api/integration/v1/integrations/archive" --user "${USR}:${PSW}" --form "file=@\\"${fileName}\\"" """
                            bat(cmd)
                        } else if (method == 'Replace') {
                            echo 'Replacing integration'
                            def deactivateCmd = """curl --user "${USR}:${PSW}" --header "Content-Type: application/json" --header "X-HTTP-Method-Override: PATCH" -d @Deactivate.json "${serviceURL}/ic/api/integration/v1/integrations/${integName}" """
                            bat(deactivateCmd)
                            def updateCmd = """curl -X PUT --user "${USR}:${PSW}" --header "Accept: application/json" --form "file=@\\"${fileName}\\"" --form "type=application/octet-stream" "${serviceURL}/ic/api/integration/v1/integrations/archive" """
                            bat(updateCmd)
                        } else {
                            echo 'No valid import method selected'
                        }
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                    script {
                        def csvFile = readFile(params.ConnectionProperties).trim()
                        def records = csvFile.readLines().drop(1).collect { it.tokenize(',') }
                        def method = params.Import_Method.trim()

                        records.each { record ->
                            def url = record[0]
                            def user = record[1]
                            def pass = record[2]
                            def connId = record[3]

                            def payload = """
                            {
                                "connectionProperties": {
                                    "propertyGroup": "CONNECTION_PROPS",
                                    "propertyName": "connectionUrl",
                                    "propertyType": "URL",
                                    "propertyValue": "${url}"
                                },
                                "securityPolicy": "BASIC_AUTH",
                                "securityProperties": [
                                    {
                                        "propertyGroup": "CREDENTIALS",
                                        "propertyName": "username",
                                        "propertyValue": "${user}"
                                    },
                                    {
                                        "propertyGroup": "CREDENTIALS",
                                        "propertyName": "password",
                                        "propertyValue": "${pass}"
                                    }
                                ]
                            }
                            """.replaceAll('\n', '').trim()

                            writeFile file: 'payload.json', text: payload

                            def cmd = """curl -X POST --user "${USR}:${PSW}" --header "X-HTTP-Method-Override:PATCH" --header "Content-Type:application/json" -d @payload.json "${serviceURL}/ic/api/integration/v1/connections/${connId}" """
                            bat(cmd)
                        }
                    }
                }
            }
        }

        stage('Import Lookup') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                    script {
                        def files = params.FileNames.split(',')
                        def method = params.Import_Method.trim()

                        files.each { file ->
                            def fileName = file.trim()
                            if (!fileName) return

                            if (method == 'New') {
                                def cmd = """curl -X POST --user "${USR}:${PSW}" -F "file=@${fileName}" -F "type=application/octet-stream" "${serviceURL}/ic/api/integration/v1/lookups/archive" """
                                bat(cmd)
                            } else if (method == 'Replace') {
                                def cmd = """curl -X PUT --user "${USR}:${PSW}" -F "file=@${fileName}" -F "type=application/octet-stream" "${serviceURL}/ic/api/integration/v1/lookups/archive" """
                                bat(cmd)
                            }
                        }
                    }
                }
            }
        }

        stage('Activate Integration') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                    script {
                        def integName = params.Integration_Identifier.trim()
                        if (params.Activate_Integration) {
                            echo 'Activating integration...'
                            def cmd = """curl --user "${USR}:${PSW}" --header "Content-Type: application/json" --header "X-HTTP-Method-Override: PATCH" -d @Activate.json "${serviceURL}/ic/api/integration/v1/integrations/${integName}" """
                            bat(cmd)
                        } else {
                            echo 'Not activating, just configuring...'
                            def cmd = """curl --user "${USR}:${PSW}" --header "Content-Type: application/json" --header "X-HTTP-Method-Override: PATCH" -d @Deactivate.json "${serviceURL}/ic/api/integration/v1/integrations/${integName}" """
                            bat(cmd)
                        }
                    }
                }
            }
        }
    }
}
