pipeline {
    agent any

    tools {
        git 'GitDefault' // Replace with your actual Git installation name from Jenkins config
    }

    environment {
        CREDS = credentials('DEV_CredID')
        USR = "${CREDS.username}"
        PSW = "${CREDS.password}"
        serviceURL = 'https://testinstance-idevjxz332qf-ia.integration.ocp.oraclecloud.com'
    }

    stages {
        stage('Initialize') {
            steps {
                echo "Initializing deployment pipeline..."
            }
        }

        stage('Import Integration') {
            steps {
                script {
                    def selectedOption = params.Import_Method?.trim()
                    if (!selectedOption) {
                        error 'Import_Method parameter not defined.'
                    }

                    def integrationUrl = "${serviceURL}/ic/api/integration/v1/integrations/archive"

                    if (selectedOption == 'New') {
                        echo 'Adding new integration'
                        bat "curl --location \"${integrationUrl}\" --user ${USR}:${PSW} --form \"file=@\"${params.IARFileName}\"\""
                    } else if (selectedOption == 'Replace') {
                        echo 'Replacing integration'
                        def integName = params.Integration_Identifier
                        def deactivateCmd = "curl --user ${USR}:${PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Deactivate.json \"${serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(deactivateCmd)

                        def updateCmd = "curl -X PUT --user ${USR}:${PSW} --header \"Accept: application/json\" --form \"file=@\"${params.IARFileName}\"\" --form type=application/octet-stream ${integrationUrl}"
                        bat(updateCmd)
                    } else {
                        echo 'Unknown import method'
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                script {
                    def csvFile = readFile(params.ConnectionProperties).trim()
                    def records = csvFile.readLines().drop(1).collect { it.tokenize(',') }

                    records.each { record ->
                        def (url, user, pass, connName) = record

                        def conProperties = """
                        {
                            \"connectionProperties\": {
                                \"propertyGroup\": \"CONNECTION_PROPS\",
                                \"propertyName\": \"connectionUrl\",
                                \"propertyType\": \"URL\",
                                \"propertyValue\": \"${url}\"
                            },
                            \"securityPolicy\": \"BASIC_AUTH\",
                            \"securityProperties\": [
                                {
                                    \"propertyGroup\": \"CREDENTIALS\",
                                    \"propertyName\": \"username\",
                                    \"propertyValue\": \"${user}\"
                                },
                                {
                                    \"propertyGroup\": \"CREDENTIALS\",
                                    \"propertyName\": \"password\",
                                    \"propertyValue\": \"${pass}\"
                                }
                            ]
                        }
                        """
                        writeFile file: 'payload.json', text: conProperties.replaceAll('\n', '').trim()
                        bat "curl -X POST --user ${USR}:${PSW} --header \"X-HTTP-Method-Override:PATCH\" --header \"Content-Type:application/json\" -d @payload.json \"${serviceURL}/ic/api/integration/v1/connections/${connName}\""
                    }
                }
            }
        }

        stage('Import Lookup') {
            steps {
                script {
                    def files = params.FileNames.split(',')*.trim()
                    def method = params.Import_Method?.trim() == 'New' ? 'POST' : 'PUT'

                    files.each { fileName ->
                        if (fileName) {
                            bat "curl -X ${method} --user ${USR}:${PSW} -F \"file=@${fileName}\" -F \"type=application/octet-stream\" ${serviceURL}/ic/api/integration/v1/lookups/archive"
                        }
                    }
                }
            }
        }

        stage('Activate Integration') {
            steps {
                script {
                    def integName = params.Integration_Identifier
                    if (params.Activate_Integration) {
                        echo 'Activating integration'
                        bat "curl --user ${USR}:${PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Activate.json \"${serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                    } else {
                        echo 'Deactivating integration'
                        bat "curl --user ${USR}:${PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Deactivate.json \"${serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                    }
                }
            }
        }
    }
}
